<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <display-name>Archetype Created Web Application</display-name>
    <!-- 1. 配置启动 Spring 容器 -->
    <!-- 主要配置和业务逻辑有关的, 比如数据源, 事务控制等 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <!--
        ContextLoaderListener: 监听器
        (1) ContextLoaderListener 监听器作用是在启动 Web 容器时, 自动装配 ApplicationContext 的配置信息.
        (2) 它实现了 ServletContextListener 接口, 在web.xml配置该监听器, 启动容器时, 会默认执行它实现的方法.
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 2. 配置中央控制器 DispatchServlet -->
    <!-- 用户的请求都会经过它的处理 -->
    <servlet>
        <servlet-name>springDispatchServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--
              指定 DispatchServlet 要去操作的 SpringMVC 配置文件
              如果这里未指定配置文件, 就会系统会默认去找 /WEB-INF/xxx-servlet.xml 配置文件,
              即 /WEB-INF/springDispatchServlet-servlet.xml, 找不到就报错.
        -->
        <!--<init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>-->
        <!-- 设置在 web 项目启动时, 就加载这个servlet实例 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--
         这里配置的 url-pattern 是 /, 表示用户的所有请求都会经过 DispatchServlet 进行处理,
         这样的配置也支持 rest 风格的 url
     -->
    <servlet-mapping>
        <servlet-name>springDispatchServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- 3.中文乱码处理过滤器 (需要配置在所有过滤器前面) -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
            <!--
                (1) forceRequestEncoding 配置成 true ,表示该过滤器会执行 request.setCharacterEncoding(encoding);
                (2) forceRequestEncoding 配置成 true, 表示该过滤器会执行 response.setCharacterEncoding(encoding);
            -->
            <init-param>
                <param-name>forceRequestEncoding</param-name>
                <param-value>true</param-value>
            </init-param>
            <init-param>
                <param-name>forceResponseEncoding</param-name>
                <param-value>true</param-value>
            </init-param>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 4.HiddenMethodFilter 过滤器 -->
    <!-- 使用 Rest 风格的 URI，可以把页面发过来的 post 请求转为指定的 delete 或者 put 请求 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
